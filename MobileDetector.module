<?php

/**
 * MobileDetector
 *
 * Mobile device detection using https://github.com/serbanghita/Mobile-Detect
 *
 * @author maks feltrin - pine3ree
 * @copyright 2014 pine3ree
 */

class MobileDetector extends WireData implements Module
{
    public static function getModuleInfo()
    {
        return array(
            'title'    => 'Mobile Device Detector',
            'version'  => 12,
            'summary'  => 'Detect client device type',
            'author'   => 'pine3ree',
            'href'     => 'https://github.com/pine3ree/MobileDetector',
            'singular' => true,
            'autoload' => function () {
                $page = wire('page');
                return !($page instanceof Page && $page->template == 'admin');
            },
            'requires' => 'Pimpled',
        );
    }

    public function ready()
    {
        $this->activate();
        $this->addHookBefore('render', $this, 'onBeforePageRender');
    }

    public function onBeforePageRender(HookEvent $event)
    {
        $page = $event->object;
        
        if ($page->template == 'admin' || $page->disableMobileDetect) {
            return;
        }

        $this->addToPage($page);
    }

    protected function activate()
    {
        $pimple = $this->wire('pimple');

        $pimple->set('mobileDetect', function () {
            return new Detection\MobileDetect();
        });

        $this->addToConfig($this->config);
    }

    protected function addToConfig(Config $config)
    {
        $pimple = $this->wire('pimple');

        $config->addHookProperty('mobileDetect', function (HookEvent $event) use ($pimple) {
            static $mobileDetect;
            if (null === $mobileDetect) {
                $mobileDetect = $pimple->get('mobileDetect');
            }
            $event->return = $mobileDetect;
        });

        $config->addHookProperty('isMobile', function (HookEvent $event) {
            static $is_mobile = null;
            if (null === $is_mobile) {
                $is_mobile = $event->object->mobileDetect->isMobile();
            }
            $event->return = $is_mobile;
        });

        $config->addHookProperty('isTablet', function (HookEvent $event) {
            static $is_tablet = null;
            if (null === $is_tablet) {
                $is_tablet = $event->object->mobileDetect->isTablet();
            }
            $event->return = $is_tablet;
        });

        $config->addHookProperty('isPhone', function (HookEvent $event) {
            static $is_phone = null;
            if (null === $is_phone) {
                $is_phone = $event->object->isMobile && !$event->object->isTablet;
            }
            $event->return = $is_phone;
        });
    }

    protected function addToPage(Page $page)
    {
        $config = $this->config;

        $page->addHookProperty('isMobile', function (HookEvent $event) use ($config) {
            static $is_mobile = null;
            if (null === $is_mobile) {
                $is_mobile = $config->isMobile;
            }
            $event->return = $is_mobile;
        });

        $page->addHookProperty('isTablet', function (HookEvent $event) use ($config) {
            static $is_tablet = null;
            if (null === $is_tablet) {
                $is_tablet = $config->isTablet;
            }
            $event->return = $is_tablet;
        });

        $page->addHookProperty('isPhone', function (HookEvent $event) use ($config) {
            static $is_phone = null;
            if (null === $is_phone) {
                $is_phone = $config->isPhone;
            }
            $event->return = $is_phone;
        });
    }

    public function ___install()
    {
        if (version_compare(PHP_VERSION, '5.3.8', '<')) {
            throw new WireException("This module requires PHP 5.3.8 or newer.");
        }

        $pwVersion = 100 * ProcessWire::versionMajor
            + 10 * ProcessWire::versionMinor
            + 1 * ProcessWire::versionRevision
        ;

        if ($pwVersion < 250) {
            throw new WireException("This module requires ProcessWire 2.5.0 or newer.");
        }
    }
}
